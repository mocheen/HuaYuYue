// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: app/role/internal/service/pb/role.proto

package role

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoleService_SelRole_FullMethodName     = "/pb.RoleService/SelRole"
	RoleService_AddRole_FullMethodName     = "/pb.RoleService/AddRole"
	RoleService_NewAdminAPL_FullMethodName = "/pb.RoleService/NewAdminAPL"
	RoleService_SelAdminAPL_FullMethodName = "/pb.RoleService/SelAdminAPL"
	RoleService_RevAdminAPL_FullMethodName = "/pb.RoleService/RevAdminAPL"
)

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	SelRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SelRoleResp, error)
	AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NewAdminAPL(ctx context.Context, in *NewAdminAPLReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SelAdminAPL(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SelAdminAPLResp, error)
	RevAdminAPL(ctx context.Context, in *RevAdminAPLReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) SelRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SelRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelRoleResp)
	err := c.cc.Invoke(ctx, RoleService_SelRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_AddRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) NewAdminAPL(ctx context.Context, in *NewAdminAPLReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_NewAdminAPL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) SelAdminAPL(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SelAdminAPLResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelAdminAPLResp)
	err := c.cc.Invoke(ctx, RoleService_SelAdminAPL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) RevAdminAPL(ctx context.Context, in *RevAdminAPLReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_RevAdminAPL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility.
type RoleServiceServer interface {
	SelRole(context.Context, *emptypb.Empty) (*SelRoleResp, error)
	AddRole(context.Context, *AddRoleReq) (*emptypb.Empty, error)
	NewAdminAPL(context.Context, *NewAdminAPLReq) (*emptypb.Empty, error)
	SelAdminAPL(context.Context, *emptypb.Empty) (*SelAdminAPLResp, error)
	RevAdminAPL(context.Context, *RevAdminAPLReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleServiceServer struct{}

func (UnimplementedRoleServiceServer) SelRole(context.Context, *emptypb.Empty) (*SelRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelRole not implemented")
}
func (UnimplementedRoleServiceServer) AddRole(context.Context, *AddRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedRoleServiceServer) NewAdminAPL(context.Context, *NewAdminAPLReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAdminAPL not implemented")
}
func (UnimplementedRoleServiceServer) SelAdminAPL(context.Context, *emptypb.Empty) (*SelAdminAPLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelAdminAPL not implemented")
}
func (UnimplementedRoleServiceServer) RevAdminAPL(context.Context, *RevAdminAPLReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevAdminAPL not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}
func (UnimplementedRoleServiceServer) testEmbeddedByValue()                     {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_SelRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).SelRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_SelRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).SelRole(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AddRole(ctx, req.(*AddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_NewAdminAPL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAdminAPLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).NewAdminAPL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_NewAdminAPL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).NewAdminAPL(ctx, req.(*NewAdminAPLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_SelAdminAPL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).SelAdminAPL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_SelAdminAPL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).SelAdminAPL(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_RevAdminAPL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevAdminAPLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).RevAdminAPL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_RevAdminAPL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).RevAdminAPL(ctx, req.(*RevAdminAPLReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelRole",
			Handler:    _RoleService_SelRole_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _RoleService_AddRole_Handler,
		},
		{
			MethodName: "NewAdminAPL",
			Handler:    _RoleService_NewAdminAPL_Handler,
		},
		{
			MethodName: "SelAdminAPL",
			Handler:    _RoleService_SelAdminAPL_Handler,
		},
		{
			MethodName: "RevAdminAPL",
			Handler:    _RoleService_RevAdminAPL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/role/internal/service/pb/role.proto",
}
